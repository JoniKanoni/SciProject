'''
Reads files, makes plots
'''
import os.path
import matplotlib.pyplot as plt
import numpy as np


def read_data():
    '''
    Reads data generated by the solver, returns data as seperate arrays


    Args:


    Returns:


    '''
    path = input('Please give Inputpath: ')

    energies_path = os.path.join(path, 'energies.dat')
    wavefuncs_path = os.path.join(path, 'wavefuncs.dat')
    expvalues_path = os.path.join(path, 'expvalues.dat')
    potential_path = os.path.join(path, 'potential.dat')

    energies = np.loadtxt(energies_path)
    wavefuncs = np.loadtxt(wavefuncs_path)
    expvalues = np.loadtxt(expvalues_path)
    potential = np.loadtxt(potential_path)
    return energies, wavefuncs, expvalues, potential

def ploty(energies, wavefuncs, expvalues, potential):
    '''
    Plots the wavefunctions, energies and expected values calculated by the solver

    Args:   energies,
            wavefuncs,
            expvalues,
            potential

    Returns: None
    '''
    #energies, wavefuncs, expvalues, potential = read_data()
    question =  input('Use auto generated settings? (Y/N) ')
    if question in ('Y','y'):
        xmin = np.min(wavefuncs[:,0])
        xmax = np.max(wavefuncs[:,0])
        ymin = np.min(potential[:,1])*1.1
        ymax = np.amax(wavefuncs[:,1:]) + max(energies)
        scale = 0.3
    else:
        scale = input('Scale please: ')
        xmin, xmax = [float(ii) for ii in input('Xmin, xmax pls, serparted by space ').split()]
        ymin, ymax = [float(ii) for ii in input('Ymin, Ymax pls ').split()]
    plt.subplot(1,2,1)
    for ii, _ in enumerate(energies):
        plt.plot(wavefuncs[:,0], float(scale)*+wavefuncs[:,ii+1]+energies[ii])
    plt.plot(potential[1:len(potential)-1,0], potential[1:len(potential)-1,1], color='black' )
    plt.plot(expvalues[:,0], energies, marker='x', linewidth=0)
    plt.xlim(xmin, xmax)
    plt.ylim(ymin, ymax)
    plt.title(r'Potential, eigenstates, $\langle \mathrm{x} \rangle$')
    plt.hlines(energies,np.min(wavefuncs[:,0]),np.max(wavefuncs[:,0]), colors= 'grey')
    plt.xlabel('x [Bohr]' )
    plt.ylabel('Energy [Hartree]')

    plt.subplot(1,2,2)
    plt.xlim(0, 1.1*np.amax(expvalues[:,1]))
    plt.ylim(ymin, ymax)
    plt.hlines(energies,0,np.max(1.1*expvalues[:,1]), colors='grey')
    plt.title(r'$ \sigma_x $')
    plt.xlabel('x [Bohr]')
    plt.plot(expvalues[:,1], energies, 'x')
    plt.show()
